// Mocks generated by Mockito 5.4.6 from annotations
// in taskii/test/schedule_task_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:taskii/models/task.dart' as _i4;
import 'package:taskii/services/task_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i2.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [taskId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Task>> getUserTasks(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserTasks, [userId]),
            returnValue: _i3.Stream<List<_i4.Task>>.empty(),
          )
          as _i3.Stream<List<_i4.Task>>);

  @override
  _i3.Future<void> toggleTaskCompletion(String? taskId, bool? isCompleted) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [taskId, isCompleted]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.Task?> getTaskById(String? taskId) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskById, [taskId]),
            returnValue: _i3.Future<_i4.Task?>.value(),
          )
          as _i3.Future<_i4.Task?>);
}
